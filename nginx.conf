# Запускать рабочие процессы от имени пользователя 'nginx' (стандартно для alpine образа)
user nginx;
# Автоматически определять количество рабочих процессов по числу ядер CPU
worker_processes auto;

# Путь к файлу для логов ошибок (уровень warn и выше)
error_log /var/log/nginx/error.log warn;
# Путь к файлу с PID главного процесса Nginx
pid       /var/run/nginx.pid;

events {
    # Максимальное количество одновременных соединений на один рабочий процесс
    worker_connections 1024;
}

http {
    # Включаем стандартные MIME типы файлов
    include       /etc/nginx/mime.types;
    # Тип файла по умолчанию, если MIME тип не определен
    default_type  application/octet-stream;

    # Формат лога доступа
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    # Путь к файлу лога доступа
    access_log  /var/log/nginx/access.log  main;

    # Включаем оптимизацию для отправки файлов напрямую из файловой системы
    sendfile        on;
    # Улучшает производительность при sendfile on путем отправки заголовков одним пакетом
    # tcp_nopush     on;

    # Время (в секундах), в течение которого keep-alive соединение будет открыто
    keepalive_timeout  65;

    # --- Настройки Gzip сжатия ---
    gzip on; # Включить сжатие
    gzip_disable "msie6"; # Отключить для старых IE
    gzip_vary on; # Добавлять заголовок Vary: Accept-Encoding
    gzip_proxied any; # Сжимать ответы от проксируемых серверов
    gzip_comp_level 6; # Уровень сжатия (1-9, 6 - хороший баланс)
    gzip_buffers 16 8k; # Буферы для сжатия
    gzip_http_version 1.1; # Минимальная версия HTTP для сжатия
    # Типы контента, которые нужно сжимать
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    # --- Определение виртуального хоста (server block) ---
    server {
        # Слушать порт 80 (стандартный HTTP порт)
        listen 80 default_server;
        # Имя сервера. '_' означает, что этот блок будет обрабатывать запросы
        # для любого имени хоста, если нет более конкретного совпадения.
        # Можно также указать IP: server_name <VPS_IP>;
        server_name _;

        # Устанавливаем максимальный размер тела запроса клиента
        # Важно для загрузки файлов! Установите с запасом. 20M = 20 мегабайт.
        client_max_body_size 20M;

        # Директория, из которой Nginx будет брать статические файлы по умолчанию.
        # Путь соответствует тому, куда мы монтируем статику в docker-compose.yml для Nginx.
        root /usr/share/nginx/html;

        # --- Обработка статических файлов ---
        # Локация для URL, начинающихся с /static/
        location /static/ {
            # Путь к статике уже определен через 'root' выше.
            # Nginx будет искать файлы в /usr/share/nginx/html/static/
            # Пытаемся отдать файл напрямую ($uri). Если не найден, вернуть 404.
            try_files $uri =404;
            # Устанавливаем заголовки кеширования для статики (например, 1 день)
            expires 1d;
            add_header Cache-Control "public";
        }

        # --- Обработка всех остальных запросов (проксирование на Go приложение) ---
        # Локация для всех остальных URL (/)
        location / {
            # Адрес Go-сервиса: 'imagecleaner' - это имя сервиса в docker-compose.yml,
            # 8080 - это порт (LISTEN_PORT), который слушает Go приложение ВНУТРИ контейнера.
            proxy_pass http://imagecleaner:8080;

            # --- Настройки проксирования ---
            # Передаем необходимые заголовки Go-приложению:
            proxy_set_header Host $host; # Оригинальный хост, запрошенный клиентом
            proxy_set_header X-Real-IP $remote_addr; # Реальный IP клиента
            # Список IP-адресов прокси (если их несколько)
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # Протокол, использованный клиентом (http или https)
            proxy_set_header X-Forwarded-Proto $scheme;

            # Увеличиваем таймауты для предотвращения ошибок 504 Gateway Timeout
            # при долгих операциях в Go-приложении (например, обработка больших файлов)
            proxy_connect_timeout       60s; # Таймаут установки соединения с бэкендом
            proxy_send_timeout          60s; # Таймаут отправки запроса бэкенду
            proxy_read_timeout          60s; # Таймаут чтения ответа от бэкенда
            send_timeout                60s; # Таймаут отправки ответа клиенту
        }

        # --- Опционально: Обработка ошибок сервера ---
        # Можно определить кастомные страницы для ошибок 5xx
        # error_page 500 502 503 504 /50x.html;
        # location = /50x.html {
        #     root /usr/share/nginx/html; # Путь к кастомной HTML странице ошибки
        # }
    }
}