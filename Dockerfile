# --- Этап сборки ---
# Используем официальный образ Go на базе Alpine для минимизации размера
FROM golang:1.24-alpine AS builder

# Устанавливаем зависимости, необходимые для статической сборки (если CGO_ENABLED=0)
RUN apk add --no-cache gcc musl-dev

# Устанавливаем рабочую директорию внутри контейнера сборки
WORKDIR /app

# Копируем файлы зависимостей
COPY go.mod go.sum ./
# Скачиваем зависимости (этот слой будет кешироваться Docker'ом)
RUN go mod download

# Копируем весь остальной исходный код приложения
COPY . .

# Собираем статически линкованный бинарник для Linux
# CGO_ENABLED=0 - отключаем CGO для статической линковки
# GOOS=linux - собираем для Linux (даже если ваша локальная машина другая)
# -ldflags="-s -w" - убираем отладочные символы для уменьшения размера
# -o /imagecleaner - имя выходного файла внутри этого этапа сборки
RUN CGO_ENABLED=0 GOOS=linux go build -ldflags="-s -w" -o /imagecleaner ./cmd/imagecleaner/main.go

# --- Этап выполнения ---
# Используем минимальный базовый образ Alpine
FROM alpine:latest

# Устанавливаем необходимые пакеты:
# tzdata - для корректной работы с временными зонами (если ваше приложение их использует)
# ca-certificates - для проверки SSL/TLS сертификатов (если приложение ходит по HTTPS к другим сервисам)
RUN apk add --no-cache tzdata ca-certificates

# Устанавливаем рабочую директорию внутри конечного контейнера
WORKDIR /app

# Копируем скомпилированный бинарник из этапа 'builder'
COPY --from=builder /imagecleaner /app/imagecleaner

# Копируем папку с веб-шаблонами и статикой
COPY web/ ./web/

# Создаем директорию для загрузок ВНУТРИ контейнера и назначаем права
# Сами данные будут храниться в volume, но папка должна существовать с нужными правами
RUN mkdir -p /app/uploads && chown nobody:nogroup /app/uploads
# База данных будет монтироваться как volume в /app/service.db

# Указываем пользователя с минимальными правами для запуска приложения
USER nobody:nogroup

# Информируем Docker, что контейнер будет слушать этот порт (НЕ публикует его)
EXPOSE 8080

# Команда по умолчанию для запуска приложения при старте контейнера
ENTRYPOINT ["/app/imagecleaner"]